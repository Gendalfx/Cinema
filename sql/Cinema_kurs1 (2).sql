-- phpMyAdmin SQL Dump
-- version 5.2.0
-- https://www.phpmyadmin.net/
--
-- Хост: 127.0.0.1:3306
-- Время создания: Май 13 2024 г., 16:52
-- Версия сервера: 8.0.30
-- Версия PHP: 7.2.34

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `Cinema_kurs1`
--

-- --------------------------------------------------------

--
-- Структура таблицы `film`
--

CREATE TABLE `film` (
  `id_film` int NOT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `description` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Дамп данных таблицы `film`
--

INSERT INTO `film` (`id_film`, `name`, `description`) VALUES
(1, 'Мстители: Финал (2019)', 'Оставшиеся в живых члены команды Мстителей и их союзники должны разработать новый план, который поможет противостоять разрушительным действиям могущественного титана Таноса. После наиболее масштабной и трагической битвы в истории они не могут допустить ошибку.'),
(2, 'Глаза змеи (1998)', 'Начиная с первых сенсационных выстрелов и заканчивая неожиданным финалом, фильм полон загадок и тревожного ожидания. Кейдж играет роль Рика Санторо, эксцентричного детектива полиции Атлантик-Сити, который приходит посмотреть на своего спортивного кумира и заодно поправить свои финансовые дела на тотализаторе.Внезапная стрельба во время поединка превращает 14 тысяч болельщиков в свидетелей политического убийства. Показания свидетелей, видеозаписи электронной системы наблюдения за казино и информация, полученная от таинственной незнакомки в белом, — все это вместе рисует перед видавшим виды Санторо настолько невероятную картину убийства, что он просто отказывается в нее верить.'),
(3, 'Чикатило (2020)', 'Он убивал и оставался безнаказанным более десяти лет, от его руки погибло более пятидесяти человек. Вместо него был осужден и расстрелян невиновный человек. Долгое время совершенные им убийства не могли объединить в одно дело. Маньяков такого калибра просто не существовало в СССР, поэтому органы правопорядка оказались не готовы к борьбе с «Бешеным зверем»,...'),
(4, 'Дюна: Часть вторая (2023)', 'Фильм расскажет о мифическом путешествии Пола из дома Атрейдесов и фрименов на пути мести мятежникам, которые уничтожили его семью. Между любовью всей своей жизни и судьбой известной вселенной он выбирает борьбу против ужасного будущего, которое только он может предсказать.'),
(5, 'Без ответа (2023)', 'Коул – уверенный в себе мужчина, находящийся в поисках достойной спутницы жизни. И однажды он встречает таинственную красавицу по имени Сэди, пробуждающую в герое противоречивые чувства. Уже на втором свидании выясняется, что судьба свела Коула с сотрудницей секретных спецслужб, специализирующейся на выполнении особо опасных заданий. Оказывается, что эта хрупкая красавица обладает навыками профессионального бойца, которые помогают ей выпутываться даже из самых безумных ситуаций. Тем временем Сэди узнает, что миру вновь грозит опасность. Недолго думая, девушка берет Коула в напарники и отправляется вместе с ним в невероятное путешествие. Ребятам нужно раскрыть личности очередных плохих парней и не дать им уничтожить планету. Удастся ли парочке справиться со столь непростой миссией? И что по итогу станет с их отношениями?'),
(6, 'Шаг к мечте: Раз и навсегда (2023)', 'Молодой танцор Чэнь Шо, несмотря на непростую жизнь, следует за мечтой. Случай сводит его с Дин Лэем, тренером известной стрит-дэнс команды «Восклицательный знак». Попав туда, Чэнь Шо быстро понимает, что путь к успеху не будет простым, ведь у тренера Дина на него свои планы. Поэтому у него остаются лишь танцпол, любовь и ритм, ведущие его к такой желанной победе.'),
(7, 'Индиана Джонс и колесо судьбы (2023)', 'События ленты развиваются в конце 60-х годов прошлого века. Америка и СССР находятся в состоянии холодной войны, усугубляемой космической гонкой. Индиана Джонс – некогда бесстрашный археолог и искатель приключений, с ужасом наблюдающий за происходящими в мире событиями. И однажды старик узнает, что американское правительство начало вербовку бывших нацистов, чтобы победить Союз в борьбе за космическое пространство. Вскоре к Джонсу присоединяется его крестная дочь, отличающаяся живым умом и большой любовью ко всему неизвестному. Тем временем один из нацистских преступников, ныне занимающий важный пост в НАСА, решает взять судьбы миллиардов людей в свои руки. Что же он замыслил? Впереди участников этих судьбоносных для мира событий ждут невероятные приключения, которые помогут им раскрыть уйму секретов из далекого прошлого.'),
(8, 'Финт Боброва (2023)', 'Фильм в честь 100-летия со дня рождения Всеволода Михайловича Боброва, советского футболиста, хоккеиста и выдающегося тренера. Бобров был олимпийским чемпионом, заслуженным мастером спорта и тренером, а также единственным в истории капитаном сборной, выступавшим как на летних, так и на зимних Олимпийских играх.'),
(9, 'Кентавр (2023)', 'Таксист Саша предпочитает работать по ночам, когда нет пробок и, как он считает, люди раскрываются с другой стороны. Очередная его клиентка - эскортница Лиза - проникается к парню симпатией и просит покатать её по делам. Ночь только начинается, и, кажется, обоим есть, что скрывать.'),
(10, 'Кольцевая линия (2023)', 'В системе управления беспилотными поездами Сингапурского метрополитена происходит сбой, из-за чего следовавший по кольцевой линии последний вечерний состав сворачивает на закрытые пути, врезается в ограждение и застревает. Пока инженеры работают над решением проблемы, а пассажиры думают, как выбраться, обитающее в тёмных тоннелях чудовище начинает охоту на незваных гостей.');

-- --------------------------------------------------------

--
-- Структура таблицы `hall`
--

CREATE TABLE `hall` (
  `id_hall` int NOT NULL,
  `capacity` int NOT NULL DEFAULT '20'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Дамп данных таблицы `hall`
--

INSERT INTO `hall` (`id_hall`, `capacity`) VALUES
(1, 20),
(2, 20),
(3, 20);

-- --------------------------------------------------------

--
-- Структура таблицы `screening`
--

CREATE TABLE `screening` (
  `id_screening` int NOT NULL,
  `id_film` int NOT NULL,
  `id_hall` int NOT NULL,
  `time` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Дамп данных таблицы `screening`
--

INSERT INTO `screening` (`id_screening`, `id_film`, `id_hall`, `time`) VALUES
(27, 1, 1, '2024-05-13 13:16:49'),
(28, 1, 1, '2024-05-13 13:16:49'),
(29, 1, 1, '2024-05-13 13:16:49'),
(30, 1, 1, '2024-05-13 13:16:49'),
(31, 1, 1, '2024-05-13 13:16:49'),
(32, 1, 1, '2024-05-13 13:16:49'),
(33, 1, 1, '2024-05-13 13:16:49'),
(34, 1, 1, '2024-05-13 13:16:49'),
(35, 1, 1, '2024-05-13 13:16:49'),
(36, 1, 1, '2024-05-13 13:16:49'),
(37, 3, 2, '2024-06-13 13:16:49'),
(38, 3, 2, '2024-06-13 13:16:49'),
(39, 3, 2, '2024-06-13 13:16:49'),
(40, 3, 2, '2024-06-13 13:16:49'),
(41, 3, 2, '2024-06-13 13:16:49'),
(42, 3, 2, '2024-06-13 13:16:49'),
(43, 3, 2, '2024-06-13 13:16:49'),
(44, 3, 2, '2024-06-13 13:16:49'),
(45, 3, 2, '2024-06-13 13:16:49'),
(46, 3, 2, '2024-06-13 13:16:49'),
(47, 4, 3, '2024-07-13 13:16:49'),
(48, 4, 3, '2024-07-13 13:16:49'),
(49, 4, 3, '2024-07-13 13:16:49'),
(50, 4, 3, '2024-07-13 13:16:49'),
(51, 4, 3, '2024-07-13 13:16:49'),
(52, 4, 3, '2024-07-13 13:16:49'),
(53, 4, 3, '2024-07-13 13:16:49'),
(54, 4, 3, '2024-07-13 13:16:49'),
(55, 4, 3, '2024-07-13 13:16:49'),
(56, 4, 3, '2024-07-13 13:16:49');

-- --------------------------------------------------------

--
-- Структура таблицы `seats`
--

CREATE TABLE `seats` (
  `id_seats` int NOT NULL,
  `id_hall` int NOT NULL,
  `row` int NOT NULL,
  `seat` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Дамп данных таблицы `seats`
--

INSERT INTO `seats` (`id_seats`, `id_hall`, `row`, `seat`) VALUES
(13, 1, 1, 1),
(14, 1, 1, 2),
(15, 1, 1, 3),
(16, 1, 1, 4),
(17, 1, 1, 5),
(18, 1, 2, 1),
(19, 1, 2, 2),
(20, 1, 2, 3),
(21, 1, 2, 4),
(22, 1, 2, 5),
(23, 2, 1, 1),
(24, 2, 1, 2),
(25, 2, 1, 3),
(26, 2, 1, 4),
(27, 2, 1, 5),
(28, 2, 2, 1),
(29, 2, 2, 2),
(30, 2, 2, 3),
(31, 2, 2, 4),
(32, 2, 2, 5),
(33, 3, 1, 1),
(34, 3, 1, 2),
(35, 3, 1, 3),
(36, 3, 1, 4),
(37, 3, 1, 5),
(38, 3, 2, 1),
(39, 3, 2, 2),
(40, 3, 2, 3),
(41, 3, 2, 4),
(42, 3, 2, 5);

-- --------------------------------------------------------

--
-- Структура таблицы `tickets`
--

CREATE TABLE `tickets` (
  `id_screening` int NOT NULL,
  `id_seats` int NOT NULL,
  `is_sold` tinyint NOT NULL DEFAULT '0',
  `cost` int NOT NULL DEFAULT '2500'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Дамп данных таблицы `tickets`
--

INSERT INTO `tickets` (`id_screening`, `id_seats`, `is_sold`, `cost`) VALUES
(27, 13, 1, 2500),
(28, 14, 0, 2500),
(29, 15, 1, 2500),
(30, 16, 1, 2500),
(31, 17, 0, 6200),
(32, 18, 0, 2500),
(33, 19, 1, 2500),
(34, 20, 1, 2500),
(35, 21, 0, 7200),
(36, 22, 0, 2500),
(37, 23, 1, 3100),
(38, 24, 0, 3100),
(39, 25, 0, 3100),
(40, 26, 1, 3100),
(41, 27, 1, 3100),
(42, 28, 1, 3100),
(43, 29, 0, 3100),
(44, 30, 0, 3100),
(45, 31, 0, 3100),
(46, 32, 1, 3100),
(47, 33, 0, 1000),
(48, 34, 0, 1000),
(49, 35, 1, 1000),
(50, 36, 0, 1000),
(51, 37, 0, 1000),
(52, 38, 1, 1000),
(53, 39, 1, 1000),
(54, 40, 1, 1000),
(55, 41, 0, 1000),
(56, 42, 1, 1000);

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `film`
--
ALTER TABLE `film`
  ADD PRIMARY KEY (`id_film`);

--
-- Индексы таблицы `hall`
--
ALTER TABLE `hall`
  ADD PRIMARY KEY (`id_hall`);

--
-- Индексы таблицы `screening`
--
ALTER TABLE `screening`
  ADD PRIMARY KEY (`id_screening`) USING BTREE,
  ADD KEY `film_id` (`id_film`),
  ADD KEY `screening_ibfk_3` (`id_hall`),
  ADD KEY `id_hall` (`id_hall`);

--
-- Индексы таблицы `seats`
--
ALTER TABLE `seats`
  ADD PRIMARY KEY (`id_seats`),
  ADD KEY `id_hall` (`id_hall`);

--
-- Индексы таблицы `tickets`
--
ALTER TABLE `tickets`
  ADD PRIMARY KEY (`id_screening`),
  ADD KEY `hall_id` (`id_seats`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `film`
--
ALTER TABLE `film`
  MODIFY `id_film` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=41;

--
-- AUTO_INCREMENT для таблицы `hall`
--
ALTER TABLE `hall`
  MODIFY `id_hall` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=21;

--
-- AUTO_INCREMENT для таблицы `screening`
--
ALTER TABLE `screening`
  MODIFY `id_screening` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=57;

--
-- AUTO_INCREMENT для таблицы `seats`
--
ALTER TABLE `seats`
  MODIFY `id_seats` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=43;

--
-- AUTO_INCREMENT для таблицы `tickets`
--
ALTER TABLE `tickets`
  MODIFY `id_screening` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=57;

--
-- Ограничения внешнего ключа сохраненных таблиц
--

--
-- Ограничения внешнего ключа таблицы `screening`
--
ALTER TABLE `screening`
  ADD CONSTRAINT `screening_ibfk_2` FOREIGN KEY (`id_screening`) REFERENCES `tickets` (`id_screening`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  ADD CONSTRAINT `screening_ibfk_3` FOREIGN KEY (`id_film`) REFERENCES `film` (`id_film`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  ADD CONSTRAINT `screening_ibfk_4` FOREIGN KEY (`id_hall`) REFERENCES `hall` (`id_hall`) ON DELETE RESTRICT ON UPDATE RESTRICT;

--
-- Ограничения внешнего ключа таблицы `seats`
--
ALTER TABLE `seats`
  ADD CONSTRAINT `seats_ibfk_1` FOREIGN KEY (`id_hall`) REFERENCES `hall` (`id_hall`) ON DELETE RESTRICT ON UPDATE RESTRICT;

--
-- Ограничения внешнего ключа таблицы `tickets`
--
ALTER TABLE `tickets`
  ADD CONSTRAINT `tickets_ibfk_1` FOREIGN KEY (`id_seats`) REFERENCES `seats` (`id_seats`) ON DELETE RESTRICT ON UPDATE RESTRICT;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
